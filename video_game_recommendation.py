# -*- coding: utf-8 -*-
"""Video_game_recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EhnFzfnc3Pf0hb4tHKObLOpDK5fI6Xwk

# **Laporan Proyek Machine Learning - M. Fakhrizal Nur Athoilah**

# Data Understanding

## a. Loading Data
"""

!pip install -q kaggle
!pip install lightfm

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import ast

from collections import Counter

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import normalize
from sklearn.metrics.pairwise import cosine_similarity, linear_kernel
from sklearn.neighbors import NearestNeighbors
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score, precision_score, recall_score, f1_score

from lightfm import LightFM
from lightfm.cross_validation import random_train_test_split
from lightfm.data import Dataset
from lightfm.evaluation import precision_at_k, auc_score, recall_at_k

from google.colab import drive
drive.mount('/content/drive')

!mkdir -p ~/.kaggle
!cp /content/drive/MyDrive/Submission_machine_learning_terapan_2/kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d jahnavipaliwal/video-game-reviews-and-ratings

!unzip /content/video-game-reviews-and-ratings.zip

df = pd.read_csv('video_game_reviews.csv')

df

"""Dataset ini berisi 47.774 entri game dengan 18 fitur yang mencakup atribut penting seperti genre, platform, rating pengguna, kualitas grafis dan cerita, harga, serta ulasan teks. Ini memberikan landasan kuat untuk membangun sistem rekomendasi game yang baik.

Sumber dataset: https://www.kaggle.com/datasets/jahnavipaliwal/video-game-reviews-and-ratings

## b. Deskripsi Variable

Dataset ini memiliki variable-variable sebagai berikut:

- `Game Title`: Nama atau judul dari video game.
- `User Rating`: Penilaian yang diberikan oleh pengguna terhadap game, biasanya dalam skala tertentu (misalnya 1–10).
- `Age Group Targeted`: Kelompok usia yang menjadi target utama game ini, seperti "Kids", "Teens", atau "Adults".
- `Price`: Harga jual game dalam satuan.
- `Platform`: Platform di mana game tersedia, seperti PC, PlayStation, Xbox, atau Switch.
- `Requires Special Device`: Menunjukkan apakah game memerlukan perangkat khusus seperti VR headset atau motion controller.
- `Developer`: Nama studio atau pengembang game.
- `Publisher`: Nama perusahaan yang merilis atau mendistribusikan game.
- `Release Year`: Tahun rilis dari game tersebut.
- `Genre`: Genre atau jenis permainan, seperti Action, RPG, Puzzle, atau Sports.
- `Multiplayer`: Menunjukkan apakah game mendukung mode multipemain.
- `Game Length (Hours)`: Durasi rata-rata permainan dalam jam.
- `Graphics Quality`: Penilaian terhadap kualitas grafis game, bisa dalam skala tertentu atau kategori seperti Low, Medium, High.
- `Soundtrack Quality`: Penilaian terhadap kualitas musik atau efek suara dalam game.
- `Story Quality`: Penilaian terhadap kualitas cerita atau alur narasi game.
- `User Review Text`:	Ulasan atau komentar pengguna tentang game tersebut.
- `Game Mode`: Mode permainan yang tersedia, seperti Single Player, Multiplayer, atau Co-op.
- `Min Number of Players`: Jumlah minimum pemain yang dibutuhkan untuk memainkan game, terutama untuk game multipemain atau co-op.

## c. Jumlah data pada dataset
"""

for i, (nama_kolom, jumlah) in enumerate(df.count().items(), 1):
    print(f'Kolom {i}: {nama_kolom:<25} - Jumlah Data: {jumlah}')

df.info()

"""Hasil di atas bisa kita lihat terdapat:
- Total 18 kolom.
- Mayoritas kolom memiliki tipe data `object`.
- 13 kolom bertipe `object` (string/kategori)
→ Berisi teks atau nilai kategorikal seperti nama game, genre, platform, review, kualitas, dan lainnya.
- 3 kolom bertipe `float64`
→ Data numerik dengan desimal: User Rating, Price, Game Length (Hours).
- 2 kolom bertipe `int64`
→ Bilangan bulat: Release Year, Min Number of Players.
"""

df.describe()

"""Fungsi describe() digunakan untuk menampilkan ringkasan statistik deskriptif pada setiap kolom numerik dalam data. Beberapa informasi yang ditampilkan antara lain:
- Count adalah jumlah entri (baris) yang memiliki nilai tidak kosong pada kolom tersebut.
- Mean adalah nilai rata-rata dari semua data pada kolom.
- Std (standard deviation) menunjukkan seberapa besar sebaran atau variasi data terhadap rata-rata.
- Min adalah nilai terkecil dalam kolom.
- 25%, 50% (median), dan 75% adalah nilai kuartil yang membagi data menjadi empat bagian.
- Max adalah nilai terbesar dalam kolom.

## d. Kondisi dataset
"""

df.isnull().sum()

"""Dataset ini tidak memiliki nilai kosong sama sekali."""

df.duplicated().sum()
print("Jumlah data duplikat:", df.duplicated().sum())

"""Dataset ini juga tidak memiliki nilai duplikat."""

numeric_cols = df.select_dtypes(include=np.number).columns

# Hitung Q1, Q3, dan IQR
Q1 = df[numeric_cols].quantile(0.25)
Q3 = df[numeric_cols].quantile(0.75)
IQR = Q3 - Q1

# Cek jumlah outlier per kolom
outliers = ((df[numeric_cols] < (Q1 - 1.5 * IQR)) | (df[numeric_cols] > (Q3 + 1.5 * IQR)))
outlier_count = outliers.sum()

print("Jumlah outlier:")
print(outlier_count)

"""Dataset ini juga tidak memiliki outlier.

## Mark
Dataset Video Game Reviews and Ratings terdiri dari data deskriptif tentang game seperti judul, genre, platform, rating pengguna, panjang permainan, dan ulasan. Namun, dataset ini tidak menyertakan informasi pengguna unik seperti User_ID, yang dibutuhkan untuk pendekatan Collaborative Filtering.

Karena itu, pendekatan yang dipilih dalam proyek ini adalah:

**Content-Based Filtering**

Content-Based Filtering membangun sistem rekomendasi berdasarkan kesamaan fitur antar item (dalam hal ini, game). Beberapa fitur yang digunakan antara lain: Dengan pendekatan ini, sistem akan merekomendasikan game yang memiliki karakteristik mirip dengan game yang disukai pengguna sebelumnya (berdasarkan konten, bukan data pengguna).

## d. Visualisasi Unvariate
a. Menggunakan Boxplot
"""

# Tentukan fitur-fitur yang ingin divisualisasikan
fitur = ['User Rating', 'Price', 'Game Length (Hours)', 'Min Number of Players',
         'Game Title', 'Developer', 'User Review Text']

# Atur ukuran grid plot (diperkecil)
fig, axes = plt.subplots(3, 3, figsize=(12, 8))  # Ukuran diperkecil dari 18x12

for i, fitur_name in enumerate(fitur):
    row = i // 3
    col = i % 3
    ax = axes[row, col]

    if fitur_name in ['Game Title', 'Developer', 'User Review Text']:
        # Hitung panjang karakter dari teks
        text_lengths = df[fitur_name].str.len()
        sns.boxplot(y=text_lengths, ax=ax, width=0.3)  # Lebar box dikurangi
        ax.set_ylabel('Panjang Teks')
    else:
        sns.boxplot(data=df, y=fitur_name, ax=ax, width=0.3)  # Lebar box dikurangi
        ax.set_ylabel(fitur_name)

    ax.set_title(f'Boxplot of {fitur_name}', fontsize=10)  # Judul lebih kecil
    ax.tick_params(axis='y', labelsize=8)

# Hapus subplot kosong jika ada
if len(fitur) < 9:
    for j in range(len(fitur), 9):
        fig.delaxes(axes.flatten()[j])

plt.tight_layout()
plt.show()

"""Berikut ini penjelasan dari masing-masing box plot:

**1. Boxplot of User Rating**
- Menampilkan distribusi nilai rating dari pengguna untuk masing-masing game.
- Median sekitar 32–35, menunjukkan rating rata-rata pengguna ada di rentang tersebut.
- Terlihat adanya outlier di bawah 15 dan di atas 45, yang menunjukkan bahwa sebagian kecil game memiliki rating sangat rendah atau sangat tinggi.
- Sebaran data cukup merata namun condong ke tengah, mencerminkan variasi penilaian pengguna.

**2. Boxplot of Price**
- Menampilkan distribusi harga dari game.
- Median harga berada di sekitar 40–45.
- Terdapat outlier di bawah 25 dan di atas 55–60, menunjukkan adanya game yang sangat murah maupun sangat mahal.
- Distribusinya cukup lebar, mencerminkan adanya perbedaan harga yang signifikan antar game.

**3. Boxplot of Game Length (Hours)**
- Menampilkan sebaran durasi gameplay atau lamanya game dimainkan.
- Median berada di sekitar 30 jam, menandakan sebagian besar game berdurasi cukup panjang.
- Terdapat outlier di kedua sisi, menunjukkan beberapa game yang sangat singkat maupun sangat panjang.
- Rentang interkuartil yang lebar menunjukkan variasi yang besar dalam durasi game.

**4. Boxplot of Min Number of Players**
- Menampilkan jumlah minimal pemain yang dibutuhkan untuk memainkan game.
- Median berada di 5–6 pemain, artinya kebanyakan game dirancang untuk dimainkan dalam grup.
- Terlihat outlier di bawah 2 dan di atas 8, yang menunjukkan adanya game yang bisa dimainkan solo maupun secara besar-besaran.
- Variasi antar game cukup jelas, menunjukkan beragam gaya bermain yang ditawarkan.

**5. Boxplot of Game Title (Panjang Teks)**
- Mengukur panjang karakter nama game (bukan isi game-nya).
-Median panjang judul game berada di sekitar 18–20 karakter.
- Beberapa game memiliki judul sangat pendek (~ 5 karakter), dan beberapa cukup panjang (~ 40 karakter).
- Sebagian besar judul game memiliki panjang yang cukup moderat, menunjukkan konsistensi dalam penamaan.

**6. Boxplot of Developer (Panjang Teks)**
- Menampilkan panjang teks nama developer.
- Median berada di kisaran 8–9 karakter.
- Outlier menunjukkan adanya developer dengan nama sangat pendek (~5) dan sangat panjang (~14).
- Panjang nama developer relatif lebih konsisten dibandingkan panjang judul game.

**7. Boxplot of User Review Text (Panjang Teks)**
- Menggambarkan panjang teks ulasan dari pengguna dalam karakter.
- Median ulasan berada di kisaran 42–45 karakter, dengan variasi mulai dari 30 hingga 55+ karakter.
- Ini menunjukkan bahwa sebagian besar pengguna menulis ulasan singkat, kemungkinan berupa satu atau dua kalimat saja.
- Tidak ada outlier yang ekstrem, mencerminkan keseragaman dalam panjang review.

b. Menggunakan Histogram
"""

# Daftar fitur yang akan divisualisasikan
fitur = ['User Rating', 'Price', 'Game Length (Hours)', 'Min Number of Players',
         'Game Title', 'Developer', 'User Review Text']

# Buat plot histogram dengan ukuran yang lebih kecil
fig, axes = plt.subplots(3, 3, figsize=(14, 9))  # Diperkecil dari (18, 12)

for i, fitur_name in enumerate(fitur):
    row = i // 3
    col = i % 3
    ax = axes[row, col]

    if fitur_name in ['Game Title', 'Developer', 'User Review Text']:
        text_lengths = df[fitur_name].str.len()
        sns.histplot(text_lengths, bins=30, kde=True, ax=ax)
        ax.set_xlabel('Panjang Teks')
    else:
        sns.histplot(df[fitur_name], bins=30, kde=True, ax=ax)
        ax.set_xlabel(fitur_name)

    ax.set_title(f'Histogram of {fitur_name}')

# Hapus subplot kosong jika ada
if len(fitur) < 9:
    for j in range(len(fitur), 9):
        fig.delaxes(axes.flatten()[j])

plt.tight_layout()
plt.show()

"""Berikut adalah penjelasan dari per subplot:

**1. User Rating**
- Histogram menunjukkan pola menyerupai kurva normal, dengan mayoritas rating berkumpul di sekitar nilai 30.
- Nilai rating tersebar dari sekitar 10 hingga 50, dan tidak ada dominasi pada skor rendah atau tinggi.

**2. Price**
- Nilai harga tersebar cukup merata di seluruh rentang, dari sekitar 20 hingga 60.
- Tidak terlihat adanya konsentrasi pada harga tertentu, menunjukkan game berasal dari berbagai segmen harga.

**3. Game Length (Hours)**
- Panjang waktu bermain game tersebar di kisaran 0 hingga 60 jam, dengan jumlah game relatif seragam di berbagai durasi.
- Terdapat sedikit konsentrasi pada jam-jam tertentu, namun secara umum cukup bervariasi.

**4. Min Number of Players**
- Nilai minimum pemain cenderung diskrit dan merata dari 1 hingga 10.
- Tidak ada angka jumlah pemain minimum yang secara mencolok mendominasi.

**5. Game Title (Panjang Teks)**
- Panjang karakter judul game bervariasi dari sekitar 5 hingga 40 karakter.
- Beberapa puncak frekuensi muncul di sekitar panjang 10, 15, dan 25 karakter.

**6. Developer (Panjang Teks)**
- Nama pengembang memiliki panjang teks yang tersebar dari sekitar 5 hingga 14 karakter.
- Terlihat puncak pada panjang tertentu, menandakan banyak developer menggunakan nama dengan panjang khas.

**7. User Review Text (Panjang Teks)**
- Panjang ulasan pengguna berkisar antara 30 hingga 55 karakter.
- Beberapa panjang teks muncul lebih sering, menunjukkan kecenderungan pengguna menulis ulasan dengan panjang tertentu.

## e. Visualisasi Multivariative

a. Matriks Korelasi
"""

# Ambil hanya kolom numerik
numerik_df = df.select_dtypes(include=['int64', 'float64'])

# Hitung korelasi
corr_matrix = numerik_df.corr()

# Visualisasikan dengan heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix antar Fitur Numerik')
plt.show()

"""Berikut penjelasan singkat dari korelasi matriks:

**1. User Rating**
- Memiliki korelasi positif yang kuat dengan Price (0.76), menunjukkan bahwa game dengan rating tinggi cenderung memiliki harga yang lebih tinggi.
- Juga berkorelasi positif dengan Game Length (Hours) (0.63), yang berarti game dengan durasi lebih panjang cenderung mendapat rating lebih baik.
- Tidak menunjukkan hubungan berarti dengan Release Year atau Min Number of Players.

**2. Price**
- Memiliki korelasi positif yang kuat dengan User Rating (0.76), menandakan bahwa game yang lebih mahal umumnya memiliki rating lebih tinggi.
- Tidak memiliki hubungan signifikan dengan fitur lainnya seperti Release Year, Game Length (Hours), atau Min Number of Players.

**3. Release Year**
- Tidak memiliki korelasi yang berarti dengan fitur lainnya.
- Nilai korelasi sangat mendekati nol, menunjukkan bahwa tahun rilis tidak berkaitan kuat dengan rating, harga, durasi main, maupun jumlah pemain minimum.

**4. Game Length (Hours)**
- Berkorelasi positif dengan User Rating (0.63), artinya game yang berdurasi lebih panjang cenderung mendapatkan penilaian lebih baik dari pengguna.
- Korelasinya dengan fitur lain sangat lemah atau mendekati nol.

**5. Min Number of Players**
- Tidak menunjukkan hubungan korelasi yang signifikan dengan fitur numerik lainnya.
- Nilai korelasinya mendekati nol di semua pasangan fitur.

b. Pairplot
"""

numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns

sns.pairplot(df[numeric_cols])
plt.suptitle("Pairplot antar Semua Fitur Numerik", y=1.02)
plt.show()

"""Berikut adalah penjelasan Scatter Plot antar Variabel:

**1. User Rating vs Price**
- Scatter plot menunjukkan pola linier positif yang kuat, mengindikasikan bahwa semakin tinggi rating sebuah game, semakin mahal pula harganya.
- Ini mendukung hasil korelasi sebelumnya (r = 0.76).

**2. User Rating vs Game Length (Hours)**
- Terlihat pola linier positif: game dengan durasi bermain lebih lama cenderung memiliki rating lebih tinggi.
- Sebagian besar titik membentuk diagonal yang naik, mendukung korelasi positif sebelumnya (r = 0.63).

**3. User Rating vs Release Year / Min Number of Players**
- Titik-titik terlihat tersebar tanpa pola jelas, menandakan tidak ada korelasi signifikan.
- Ini sesuai dengan nilai korelasi mendekati nol pada heatmap.

**4. Price vs Game Length (Hours)**
- Tidak tampak pola yang konsisten atau jelas.
- Titik tersebar secara acak, mendukung asumsi tidak ada hubungan kuat antara harga game dan durasi mainnya.

**5. Release Year vs Fitur Lain**
- Sebagian besar plot terhadap Release Year menunjukkan sebaran horizontal atau vertikal garis-garis.
- Ini karena Release Year bersifat diskrit dan terbatas (sekitar 2010–2022), sehingga tidak menunjukkan pola korelatif berarti terhadap fitur lainnya.

**6. Min Number of Players vs Fitur Lain**
- Scatter plot tampak tersegmentasi dalam barisan vertikal, karena data bersifat diskrit/kategori numerik (1–10 pemain).
- Tidak ada indikasi pola linier atau korelasi yang kuat dengan fitur lainnya.

**7. Diagonal Histogram**
- Memberikan gambaran distribusi setiap fitur:
  - User Rating, Distribusi mirip kurva normal.
  - Price, Cenderung merata, meskipun sedikit condong ke sisi tengah.
  - Release Year, Data tersebar merata dari 2010–2022.
  - Game Length, Menunjukkan sebaran seragam.
  - Min Number of Players, Bertingkat karena data diskrit.
"""

def plot_top_values(df, column_name, top_n=10):
    """
    Menampilkan dan memvisualisasikan nilai-nilai teratas (top_n) yang paling sering muncul
    dalam kolom kategorikal bertipe object (misal: Genre, Platform, Developer).

    Args:
        df: pandas DataFrame.
        column_name: Nama kolom bertipe object.
        top_n: Jumlah nilai teratas yang akan ditampilkan (default: 10).
    """
    all_values = []

    # Pisahkan jika isinya ada koma (multi-label seperti 'Action, Adventure')
    for value in df[column_name]:
        all_values.extend([v.strip() for v in value.split(',')])

    # Hitung frekuensi setiap nilai unik
    value_counts = Counter(all_values)
    top_values = value_counts.most_common(top_n)

    # Print nilai-nilai teratas
    print(f"\nTop {top_n} nilai terbanyak di kolom '{column_name}':")
    for value, count in top_values:
        print(f"- {value}: {count}")

    # Warna visual yang menarik
    colors = ['#F67280', '#355C7D', '#6C5B7B', '#C06C84', '#F8B195',
              '#355C7D', '#F67280', '#99B898', '#2A363B', '#FF847C']

    # Plot
    plt.figure(figsize=(10, 6))
    plt.bar([val[0] for val in top_values], [val[1] for val in top_values], color=colors[:top_n])
    plt.title(f'Top {top_n} Nilai di Kolom: {column_name}', fontsize=14)
    plt.xlabel('Kategori', fontsize=12)
    plt.ylabel('Frekuensi', fontsize=12)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

plot_top_values(df, 'Genre')
plot_top_values(df, 'Platform')
plot_top_values(df, 'Game Mode')
plot_top_values(df, 'Publisher')

"""🎮 Insight Top 10 Genre:
- Semua genre yang muncul merupakan genre populer lintas platform dan usia, menunjukkan bahwa dataset ini mencerminkan pasar game yang luas dan beragam.

- RPG, Shooter, dan Strategy menempati posisi teratas, mengindikasikan tingginya minat pengguna pada genre dengan gameplay kompleks, kompetitif, dan berbasis narasi.

- Perbedaan frekuensi antar genre sangat kecil (selisih hanya puluhan), menandakan bahwa preferensi genre dari pengguna cukup merata, tidak terlalu terpusat pada satu jenis saja.

- Genre seperti Puzzle, Simulation, dan Adventure juga muncul tinggi, mencerminkan permintaan signifikan terhadap game yang bersifat santai, eksploratif, atau berbasis logika.

- Hadirnya Party dan Sports menunjukkan bahwa game dengan elemen multiplayer kasual atau kompetitif tetap diminati, khususnya dalam konteks game sosial atau keluarga.

- Genre Fighting dan Action tetap stabil di posisi 9 dan 10, menandakan mereka masih menjadi pilar utama industri game meski tidak dominan secara absolut.

🕹️ Insight Top 5 Platform:
- PlayStation, PC, dan Nintendo Switch menempati posisi teratas dengan jumlah yang sangat berdekatan, menandakan bahwa dataset ini mencakup spektrum platform yang luas dan seimbang di antara console dan PC.

- Mobile memiliki frekuensi tinggi (9589), menunjukkan bahwa mobile gaming merupakan bagian penting dalam ekosistem game modern, sejalan dengan tren global meningkatnya game berbasis Android/iOS.

- Xbox berada sedikit di bawah empat platform lainnya, namun tetap menempati posisi 5 besar—menunjukkan bahwa platform ini juga sangat relevan dalam distribusi dan review game dalam dataset ini.

- Perbedaan angka yang tipis antar kelima platform mengindikasikan bahwa game development dan distribusi kini bersifat multiplatform, dan tidak lagi didominasi satu jenis perangkat saja.

- Distribusi yang merata ini juga membuat dataset sangat cocok untuk membangun sistem rekomendasi yang tidak bias terhadap satu platform, serta mampu menyarankan game berdasarkan preferensi lintas perangkat.

🌐 Insight Game Mode:
- Dataset menunjukkan pembagian yang hampir seimbang antara game Offline (23.957) dan Online (23.817), dengan selisih yang sangat kecil.

- Hal ini mengindikasikan bahwa kedua mode permainan sama-sama populer, dan pengembang game cenderung menyediakan opsi bermain baik secara online maupun offline untuk menjangkau audiens yang lebih luas.

- Offline games mungkin tetap populer karena faktor aksesibilitas tanpa internet, gameplay berbasis cerita (single-player), serta kenyamanan bermain pribadi.

- Online games mencerminkan tren sosial dan kompetitif yang semakin berkembang—baik dalam bentuk multiplayer, co-op, atau fitur live service.

- Distribusi ini sangat ideal untuk sistem rekomendasi karena memungkinkan pengguna memilih mode game berdasarkan ketersediaan koneksi, preferensi bermain, atau perangkat.

🏢 Insight Top 10 Publisher:
- Publisher-publisher besar seperti Capcom, Electronic Arts (EA), Activision, dan Epic Games mendominasi daftar teratas, menunjukkan bahwa dataset ini berasal dari game-game terkenal yang dirilis oleh perusahaan AAA (high-budget).

- Selisih angka yang sangat kecil antar publisher (rata-rata hanya puluhan) mengindikasikan bahwa representasi data cukup merata, tidak didominasi oleh satu entitas besar.

- Kehadiran Valve dan Nintendo menguatkan bahwa PC dan konsol eksklusif seperti Switch memiliki tempat penting di pasar, sesuai juga dengan hasil dari distribusi Platform sebelumnya.

- Take-Two Interactive dan Square Enix mengindikasikan banyaknya game bergenre RPG, simulasi, dan open-world, yang umumnya dikembangkan oleh publisher ini.

- Menariknya, Innersloth—meskipun merupakan publisher indie kecil (dikenal dari Among Us)—muncul di peringkat 10 besar, mencerminkan besarnya pengaruh game indie tertentu yang viral dan mendapatkan banyak ulasan.

- Insight ini mendukung pemodelan sistem rekomendasi berdasarkan nama publisher, karena tiap publisher punya gaya dan kualitas game yang khas, dan ini bisa menjadi indikator relevan untuk rekomendasi.

# Data Preparation
"""

for i, (nama_kolom, jumlah) in enumerate(df.count().items(), 1):
  print(f'Kolom {i}: {nama_kolom} - Berjumlah: {jumlah}')

"""Dataset ini terdiri dari 47.774 baris data dan 18 kolom fitur, yang masing-masing merepresentasikan karakteristik penting dari sebuah video game."""

df

"""## **TF-IDF**"""

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data cuisine
tf.fit(df['User Review Text'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

"""- TfidfVectorizer() adalah alat dari scikit-learn untuk mengubah teks menjadi representasi numerik berbasis TF-IDF (Term Frequency–Inverse Document Frequency), yang digunakan untuk menilai seberapa penting sebuah kata dalam dokumen relatif terhadap keseluruhan korpus.
- Proses ini melatih vectorizer dengan seluruh teks ulasan pengguna dari kolom 'User Review Text'.
- Hasilnya, setiap kata yang muncul dalam teks akan dicatat dan diberi skor IDF (yang menggambarkan pentingnya kata itu dalam semua review).
- Mengembalikan array dari kata-kata unik (vocabulary) yang dikenali oleh TF-IDF berdasarkan data yang telah dilatih.
- Ini mewakili fitur-fitur teks yang nantinya bisa digunakan untuk analisis lanjutan seperti klasifikasi, clustering, atau rekomendasi berbasis konten.

Ini adalah daftar kata-kata penting (fitur teks) yang diekstraksi dari ulasan pengguna setelah proses tokenisasi dan filtering oleh TF-IDF.
Misalnya:
- ‘amazing’, ‘great’, ‘solid’ -> bisa menunjukkan ulasan positif.
- ‘disappointing’, ‘bugs’ -> indikasi ulasan negatif.
- ‘graphics’, ‘gameplay’, ‘story’ -> topik yang sering dibahas.
"""

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(df['User Review Text'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""- Matriks ini memiliki 47.774 baris -> sesuai jumlah total ulasan pengguna.
- Dan 16 kolom -> hanya ada 16 kata unik yang dipertahankan sebagai fitur teks (seperti: amazing, bugs, gameplay, great, disappointing, dll).
"""

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

"""- Fungsi .todense() digunakan untuk mengonversi matriks TF-IDF yang sebelumnya dalam bentuk sparse matrix menjadi dense matrix (matriks penuh).
- Dense matrix ini berisi angka-angka desimal yang merepresentasikan skor TF-IDF dari setiap kata dalam setiap dokumen (ulasan).
- Setiap baris mewakili satu ulasan pengguna.
- Nilai-nilainya adalah bobot pentingnya kata tersebut dalam ulasan itu, dihitung menggunakan TF-IDF.
"""

# Membuat dataframe untuk melihat tf-idf matrix
pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=df['Game Title']
).sample(10, axis=1).sample(10, axis=0)

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix[:1000], tfidf_matrix[:1000])

"""- Fungsi cosine_similarity dari sklearn.metrics.pairwise digunakan untuk menghitung kemiripan antar dokumen teks (dalam hal ini ulasan game).
- tfidf_matrix[:1000] berarti kita hanya mengambil 1.000 ulasan pertama untuk dihitung kemiripannya.

# Modeling
"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=df['Game Title'][:1000], columns=df['Game Title'][:1000])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Matriksnya berbentuk 1000 × 1000, yang artinya kita membandingkan semua 1.000 game terhadap satu sama lain.

"""

def recommend_games(game_title, df, cosine_sim, top_n=10):
    # Pastikan game_title ada di dataframe
    if game_title not in df['Game Title'].values:
        return f"Game '{game_title}' tidak ditemukan dalam dataset."

    # Ambil index game yang dimaksud
    idx = df.index[df['Game Title'] == game_title][0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:top_n+1]
    game_indices = [i[0] for i in sim_scores]
    rekomendasi = df.iloc[game_indices][['Game Title', 'Genre']].copy()
    rekomendasi.rename(columns={'Genre': 'Game Genre'}, inplace=True)

    return rekomendasi.reset_index(drop=True)

"""- Fungsi ini sangat tepat untuk sistem rekomendasi berbasis konten (content-based filtering).
- Menggunakan ulasan pengguna sebagai dasar kemiripan memungkinkan sistem merekomendasikan game yang memiliki nuansa dan pengalaman bermain yang serupa, bukan hanya berdasarkan genre atau developer.
- Bisa dikembangkan lagi dengan menambahkan info lain seperti harga, platform, atau rating dalam hasil rekomendasinya.
"""

recommend_games('Grand Theft Auto V', df, cosine_sim, top_n=10)

"""Fungsi ini mencari 10 game teratas yang paling mirip dengan Grand Theft Auto V, berdasarkan ulasan pengguna yang telah dikonversi menjadi representasi vektor menggunakan TF-IDF, lalu dibandingkan menggunakan cosine similarity.

# Evaluation
"""

# Hitung sparsity
sparsity = (1.0 - tfidf_matrix.count_nonzero() / float(tfidf_matrix.shape[0] * tfidf_matrix.shape[1])) * 100
print(f"Sparsity dari TF-IDF matrix: {sparsity:.2f}%")

"""- Sparsity 56.76% artinya lebih dari setengah elemen dalam matriks TF-IDF adalah nol, alias tidak semua kata muncul di setiap ulasan.
- Ini normal dan umum dalam data teks, karena:
  - Setiap ulasan pengguna cenderung pendek dan spesifik,
  - Hanya menggunakan sebagian kecil dari seluruh kosa kata yang ada.
- Sparsity ini aman dan menunjukkan bahwa TF-IDF bekerja sebagaimana mestinya, menyaring informasi penting saja.
"""

def recommend_games_safe(title, cosine_sim_matrix, df, top_n=5):
    if title not in df['Game Title'].values[:1000]:
        print(f"Game '{title}' tidak termasuk dalam 1000 data pertama yang diproses.")
        return None

    idx = df[df['Game Title'] == title].index[0]

    sim_scores = list(enumerate(cosine_sim_matrix[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Ambil top_n rekomendasi, skip indeks dirinya sendiri
    sim_scores = [x for x in sim_scores if x[0] != idx][:top_n]

    recommendations = pd.DataFrame({
        'Game Title': [df.iloc[i]['Game Title'] for i, _ in sim_scores],
        'Similarity Score': [score for _, score in sim_scores]
    })
    return recommendations

recommend_games_safe("Minecraft", cosine_sim, df)

"""- Semua skor similarity = 1.0, artinya TF-IDF dari review text untuk game-game ini identik atau sangat-sangat mirip dengan Minecraft dalam 1000 data yang diproses.
- Kemungkinan besar terjadi karena:
  - Review pengguna yang terlalu umum, seperti “great game”, “good graphics”, “fun to play”, dsb.
  - Jumlah fitur TF-IDF hanya 16 kata unik, jadi representasi game menjadi terlalu sederhana dan banyak game yang tampak “sama”.
"""

# Ambil similarity antar item (hanya dari subset jika besar)
similarities = cosine_sim.flatten()

plt.figure(figsize=(8,5))
plt.hist(similarities, bins=30, color='skyblue', edgecolor='black')
plt.title('Distribusi Similarity Score antar Game')
plt.xlabel('Cosine Similarity')
plt.ylabel('Frekuensi')
plt.grid(True)
plt.show()

"""Insight dari visualisasi diatas adalah:
1. Mayoritas Pasangan Game Tidak Terlalu Mirip
- Puncak distribusi berada di rentang 0.0–0.2, menunjukkan bahwa sebagian besar pasangan game memiliki kesamaan konten yang sangat rendah.
- Ini wajar, mengingat dataset game biasanya sangat beragam dalam genre, tema, dan fitur deskriptif lainnya.
2. Distribusi Bimodal
- Terdapat dua kelompok besar:
  - Kelompok besar pertama dengan similarity rendah (0.0–0.2).
  - Kelompok kedua dengan similarity tinggi (sekitar 0.75–1.0).
- Ini bisa menunjukkan bahwa beberapa game memang memiliki kemiripan konten yang kuat — misalnya, game dengan genre atau tema yang sangat mirip (misal: sekuel atau franchise).
3. Similarity Tinggi yang Signifikan
- Lonjakan di area 0.95–1.0 menandakan adanya game yang sangat identik atau hampir sama dari segi deskripsi kontennya. Ini bisa saja karena:
  - Game duplikat di dataset.
  - Game dengan variasi judul yang berbeda tetapi konten sangat mirip.
4. Sebaran yang Tidak Merata
- Gap besar antara similarity menengah (sekitar 0.5–0.7) mengindikasikan bahwa hanya sedikit game yang “cukup mirip”. Artinya, konten game cenderung ekstrem: sangat mirip atau sangat berbeda.
"""

def evaluate_genre_match_safe(game_title, df, cosine_sim, top_n=5):
    subset_df = df.iloc[:1000]

    # Cek apakah game ada dalam subset
    if game_title not in subset_df['Game Title'].values:
        print(f"Game '{game_title}' tidak ditemukan di 1000 data pertama.")
        return

    idx = subset_df[subset_df['Game Title'] == game_title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]

    game_genre = df.iloc[idx]['Genre']
    print(f"\n🎮 Game Asli: {game_title} | Genre: {game_genre}\n")

    match = 0
    for i, (rec_idx, score) in enumerate(sim_scores):
        rec_genre = df.iloc[rec_idx]['Genre']
        match_status = rec_genre == game_genre
        print(f"{i+1}. {df.iloc[rec_idx]['Game Title']} | Genre: {rec_genre} | Match: {match_status}")
        if match_status:
            match += 1

    print(f"\n✅ {match}/{top_n} rekomendasi memiliki genre yang sama.")

"""Mengevaluasi seberapa relevan rekomendasi berdasarkan kesamaan genre dengan game aslinya. Ini digunakan untuk memeriksa apakah sistem rekomendasi yang dibangun hanya fokus pada teks ulasan, juga secara tidak langsung konsisten dengan preferensi genre pengguna."""

evaluate_genre_match_safe('Spelunky 2', df, cosine_sim, top_n=5)

"""- Hanya 2 dari 5 rekomendasi memiliki genre yang sama dengan game asal (Adventure).
- Hal ini menunjukkan bahwa review user kadang lebih menyoroti pengalaman bermain (fun, immersive, bebas) daripada genre teknis (Adventure, RPG, Shooter, dll).
"""